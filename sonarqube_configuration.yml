---
- hosts: sonarqube
  vars:
    sonarqube_port: 9000
    sonarqube_default_password: "admin"  # Default password after SonarQube installation
    sonarqube_new_password: "admin123"  # New password for the admin user
    sonarqube_admin_login: "admin"  # Username for SonarQube admin
    sonarqube_project_key: "MyProject"
    sonarqube_project_name: "MyProject"
    sonarqube_token_name: "MyToken"
    quality_gate_name: "Sonar way"  # Name of the quality gate
    sonarqube_host_ip: "{{ ansible_host }}"

  tasks:
    - name: Wait until SonarQube Container is reachable via TCP/IP
      ansible.builtin.wait_for:
        host: localhost
        port: "{{ sonarqube_port }}"
        state: started
        delay: 5
        connect_timeout: 15
        timeout: 30

    # Step to change the default SonarQube admin password
    - name: Change the default SonarQube admin password
      ansible.builtin.uri:
        url: "http://localhost:{{ sonarqube_port }}/api/users/change_password"
        method: POST
        user: "{{ sonarqube_admin_login }}"
        password: "{{ sonarqube_default_password }}"  # Default password
        force_basic_auth: yes
        body: "login={{ sonarqube_admin_login }}&previousPassword={{ sonarqube_default_password }}&password={{ sonarqube_new_password }}"
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        status_code: [200, 204] 
      register: change_password_response
      until: change_password_response.status in [200, 204]
      retries: 5
      delay: 5
      no_log: true  

    # Continue with project creation, token generation, etc.
    - name: Create a new project in SonarQube
      ansible.builtin.uri:
        url: "http://localhost:{{ sonarqube_port }}/api/projects/create?project={{ sonarqube_project_key }}&name={{ sonarqube_project_name | urlencode }}"
        user: "{{ sonarqube_admin_login }}"
        password: "{{ sonarqube_new_password }}"  # New password after changing
        method: POST
        force_basic_auth: yes
      register: project_response

    - name: Generate user token
      ansible.builtin.uri:
        url: "http://localhost:{{ sonarqube_port }}/api/user_tokens/generate"
        user: "{{ sonarqube_admin_login }}"
        password: "{{ sonarqube_new_password }}"  # Use the new password
        method: POST
        force_basic_auth: yes
        body: "name={{ sonarqube_token_name }}"
        headers:
          Content-Type: "application/x-www-form-urlencoded"
      register: token_response

    - name: Save token to a temporary file on remote
      ansible.builtin.copy:
        content: "{{ token_response.json.token }}"
        dest: "/tmp/sonarqube_token.txt"

    - name: Fetch token file to local machine
      ansible.builtin.fetch:
        src: "/tmp/sonarqube_token.txt"
        dest: "./"  # Local path on your Ansible machine
        flat: yes

    - name: Set the default quality gate
      ansible.builtin.uri:
        url: "http://localhost:{{ sonarqube_port }}/api/qualitygates/set_as_default"
        user: "{{ sonarqube_admin_login }}"
        password: "{{ sonarqube_new_password }}"  # Use the new password
        method: POST
        force_basic_auth: yes
        body: "name={{ quality_gate_name | urlencode }}"  # URL-encoded name of the quality gate
        headers:
          Content-Type: "application/x-www-form-urlencoded"
      register: quality_gate_response
      failed_when: quality_gate_response.status not in [200, 204]  # Allow 204 as a valid response

    - name: Create webhook
      ansible.builtin.uri:
        url: "http://{{sonarqube_host_ip}}:{{ sonarqube_port }}/api/webhooks/create"
        user: "{{ sonarqube_admin_login }}"
        password: "{{ sonarqube_new_password }}"
        method: POST
        force_basic_auth: yes
        body: "name=My Webhook&project={{ sonarqube_project_key }}&url=http://{{sonarqube_host_ip}}:8080/sonarqube-webhook/"
        headers:
          Content-Type: "application/x-www-form-urlencoded"
      register: webhook_response
      ignore_errors: yes  # Ignore errors if the webhook creation fails

