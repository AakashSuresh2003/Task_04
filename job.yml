---
- name: Create and Run Jenkins Job for SonarQube Analysis and Deployment
  hosts: jenkins
  vars:
    jenkins_host: "{{ ansible_host }}"
    jenkins_user: "admin"
    sonar_token_file_path: "/tmp/sonarqube_token.txt"
    job_name: "Job6"
    job_config: |
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition>
        <description>Pipeline for SonarQube analysis and deployment</description>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.78">
          <script>
            pipeline {
              agent any
              environment {
                SONAR_SCANNER_PATH = '/opt/sonar-scanner/bin/sonar-scanner'
                JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
                SONAR_HOST = "http://{{jenkins_host}}:9000"
                SONAR_TOKEN = '{{sonar_token}}'  // Use Jenkins credentials for security
              }
              stages {
                stage('Checkout') {
                  steps {
                    git url: "https://github.com/Rithigasri/carwebsite.git", branch: "main"
                  }
                }
                stage('SonarQube Analysis') {
                  steps {
                    script {
                      sh """
                      export JAVA_HOME=${JAVA_HOME}
                      export PATH=\$JAVA_HOME/bin:\$PATH
                      ${SONAR_SCANNER_PATH} \
                      -Dsonar.projectKey=MyProject \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=${SONAR_HOST} \
                      -Dsonar.login=${SONAR_TOKEN}
                      """
                    }
                  }
                }
                stage('Check SonarQube Task Status') {
                  steps {
                    script {
                      dir('.scannerwork') {
                        def ceTaskId = sh(script: "grep 'ceTaskId' report-task.txt | cut -d'=' -f2", returnStdout: true).trim()
                        def taskStatus = sh(script: "curl -u admin:123456 ${SONAR_HOST}/api/ce/task?id=${ceTaskId}", returnStdout: true).trim()
                        if (taskStatus.contains('"status":"FAILED"')) {
                          error "SonarQube analysis failed!"
                        } else if (taskStatus.contains('"status":"SUCCESS"')) {
                          echo "SonarQube analysis passed!"
                        } else {
                          echo "SonarQube analysis is still in progress."
                        }
                      }
                    }
                  }
                }
                stage('Grant Sudo Privileges to Jenkins') {
                  steps {
                    script {
                      sh '''
                      echo "jenkins ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/jenkins
                      sudo chmod 440 /etc/sudoers.d/jenkins
                      '''
                      echo "Sudo privileges granted to Jenkins user without password."
                    }
                  }
                }
                stage('Deploy Static Website') {
                  steps {
                    script {
                      sh '''
                      sudo chown -R www-data:www-data /var/www/html
                      sudo chmod -R 755 /var/www/html
                      sudo cp -r * /var/www/html/
                      echo "Deployment to Apache completed successfully."
                      '''
                    }
                  }
                }
              }
              post {
                success {
                  echo 'Pipeline completed successfully!'
                }
                failure {
                  echo 'Pipeline failed.'
                }
              }
            }
          </script>
        </definition>
      </flow-definition>
  tasks:
    - name: Read API token from file
      slurp:
        src: /tmp/api_token.txt
      register: token_file
    - name: Set the API token variable
      set_fact:
        api_token: "{{ (token_file.content | b64decode | from_json).data.tokenValue }}"
    - name: Read SonarQube Token from file
      slurp:
        src: "{{ sonar_token_file_path }}"
      register: sonar_token_file

    - name: Set the SonarQube token variable
      set_fact:
        sonar_token: "{{ sonar_token_file.content | b64decode }}"

    - name: Create Jenkins Job
      uri:
        url: "http://{{ jenkins_host }}:8080/createItem?name={{ job_name }}"
        method: POST
        user: "{{ jenkins_user }}"
        password: "{{ api_token }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/xml"
        body: "{{ job_config }}"
        status_code: 200
      register: create_job_result
    - name: Check job creation response
      debug:
        var: create_job_result

    - name: Trigger Jenkins Job
      uri:
        url: "http://{{ jenkins_host }}:8080/job/{{ job_name }}/build"
        method: POST
        user: "{{ jenkins_user }}"
        password: "{{ api_token }}"
        force_basic_auth: yes
        status_code: [201, 202]  
      register: trigger_job_result
